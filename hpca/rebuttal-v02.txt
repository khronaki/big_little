We are thankful to the reviewers for their valuable comments. The authors believe that the limitations of state-of-the-art OS scheduling approaches (e. g. GTS) are not well understood by the research community, specially when deployed over very unbalanced architectures (e. g. 4 big + 1 LITTLE cores). Even more, this paper is novel in the sense that it demonstrates for the first time how the scheduling responsibility should be distributed across different layers of the software stack, not just the OS layer. That is a key discovery to enable efficient asymmetric multi-core designs.

It is well known that currently the main challenge for future system designs is energy efficiency. Homogeneous multi-core systems are suffering by high energy consumption and this is the reason why mobile processors are nowadays heterogeneous, as we want the battery to last long. Many researchers are pushing towards the use of asymmetric multi-cores as a solution to tackle the power wall when running scientific applications. Our study is thoroughly stressing such a platform to evaluate its maturity of running high processing parallel applications like PARSEC.

Apart from stressing out the asymmetric system, our work finds the optimal way of utilizing this system. The GTS approach is the most sophisticated dynamic scheduling approach on the market. To our knowledge, this is the only commercially available dynamic job scheduler that is provided by ARM (thanks to Linaro) in order to offer performance and energy efficiency. Our findings show that task based programming models actually achieve better results than a product that is used on every single device with this architecture. Moreover, we demonstrate that the addition of (at least one) little core to a homogeneous big-core system degrades system's performance even if the number of cores is increased. The commercially approved GTS dynamic scheduler does not manage to increase performance and effectively utilize the little cores. We prove that the task-based approach is able to constantly increase performance and keep energy stable and we consider this a novel insight that does not appear in prior works.

More surprisingly, none of the reviewers mentioned about our contribution in the exploitation of assistant cores for the runtime activity. The findings of this section propose modifications on the task-based approach so that one core is devoted for the execution of the sequential codes and of the runtime overheads. This part of the paper shows that applications with high sequential code regions benefit by executing them on a big core, while most of the applications benefit when the sequential code is executed on the first available core of the system.

To conclude, we consider that this paper is a valuable piece of work that will help researchers in building and utilizing the future asymmetric multi-core systems. Our contributions and insights are not provided by previous works since in our work we use the real hardware, with real applications and existing state of the art scheduling approaches. We believe that our paper clearly shows the performance and energy trade-off in such systems and what scheduling approach should be chosen.