We would like to thank the reviewers for their comments on the improvement of this work. We believe that the community lacks of such thorough and reliable studies on real hardware and we consider that this work serves as a quality and unique representation of the behavior of modern asymmetric systems.

###ReviewerE
- Benchmark selection: Our work focuses on the examination of the new mobile-based asymmetric systems for their use in the next generation multi-cores. As the main challenge of the future multi-core system design is energy efficiency, many researchers are pushing towards the use of the energy efficient asymmetric multi-cores to build such systems and tackle the power wall. However, it is not yet known whether these architectures are ready to be used for running scientific applications. This gap is filled by our work that combines these benchmarks with the mobile processor architecture to explore the opportunities of the system and propose the most efficient usage in terms of performance, power and energy.

- Energy results: Our paper covers the energy results as well as the performance-energy tradeoff by reporting the average EDP (energy-delay product) results. These results show that the task based approach offers the best performance-energy tradeoff compared to the other scheduling approaches. We omit the energy consumption per benchmark results as we found that it would be more interesting to present the power chart in order to explain the average energy by looking at both performance and power. We consider that the per-benchmark energy chart does not add much insight, but we can include it if requested as we already have these numbers.

- Conclusions: Thanks to this study, we can provide possible optimizations to applications useful for asymmetric multi-cores. We will add this discussion in the conclusions of the paper.

###ReviewerF
- Contributions: We do not consider the porting of OmpSs on ARM processors as an insightful contribution of this paper. In the first round of reviews, we clarified this point (probably the second-round reviewers couldn't see it). Please, check "Main contributions and novelty" above.

- OpenMP usage: All the OmpSs features used in the PARSECSs [1] benchmarks are compatible with the task support in OpenMP 4.5 [2]. In fact, the majority of these benchmarks are available also in OpenMP (9 out of 11) and could be included in the paper. However, according to our experiments, the conclusions would be exactly the same as the main advantage in terms of performance comes from the dynamic scheduling aspect (not from the dataflow). If required, we can include these results in the final version of this paper.

- Small benefits: Performance and energy improvements of the task-based approach are significant, as this approach outperforms the existing GTS scheduler by 9 to 23% and the application-based scheduler (static threading approach) by 30 to 49%. This is an important and novel insight for developing the runtime software of the future asymmetric multi-core systems.

- Finally, we would like to clarify that the conclusions reported on page 7 refer to the heterogeneous setup, which is 2Big+2Little. In this setup, the task based approach outperforms all the existing approaches, while fluidanimate specifically, shows 13% improvement over GTS and 77% improvement over static threading.

[1] D. Chasapis et al., "PARSECSs: Evaluating the Impact of Task Parallelism in the PARSEC Benchmark Suite", Trans. Archit. Code Optim., 2015.
[2] OpenMP Application Programming Interface, Version 4.5 November 2015 (http://www.openmp.org/mp-documents/openmp-4.5.pdf)



==========================  Notes  ===========================
Reviewer E:
Why these benchmarks on this processor?
-It is well known that currently the main challenge for future system designs is energy efficiency. Homogeneous multi-core systems are suffering by high energy consumption and this is the reason why mobile processors are nowadays heterogeneous, as we want the battery to last long. Many researchers are pushing towards the use of asymmetric multi-cores as a solution to tackle the power wall when running scientific applications. Our study is thoroughly stressing such a platform to evaluate its maturity of running high processing parallel applications like PARSEC.

Energy efficiency is not addressed:
The paper addresses the energy results as well as the performance-energy tradeoff by reporting the average EDP results (energy delay product). These results show that the task based approach offers the best performance-energy tradeoff compared to other approaches.

Obvious conclusion:


Reviewer F:
conclusions of page7 top right seem exaggerated:
-This sentence refers to the asymmetric set up (2B+2L) in which fluidanimate performs better with the task based approach. 

not enough novelty:

no significant improvement:
-Improvement of task-based over GTS ranges from 9% up to 23% on average. Improvement of task-based over static threading ranges from 30 to 49%.

why we didn't use OpenMP?
-The latest OpenMP 4 supports the task dataflow model with the dependency tracking mechanisms of OmpSs. We choose not to compare to an out-dated OpenMP version that does not support task dependencies and use OmpSs instead that is using the same dataflow mechanisms.

We use OmpSs as the appropriate candidate to represent the task-based approach. As the OpenMP is evolving[1][2] (OpenMP4, OpenMP4.5), their recent versions are already using the OmpSs mechanisms (task and dependency tracking directives). Thus we consider that a comparison of the task based approach to a guided or random loop scheduling approaches would not add any insight as this OpenMP version is already outdated. We could easily however add a comparison to the OpenMP, if the reviewers consider essential, to serve as a task-based baseline.

