===========================================================================
                          ISCA 2016 Review #239A
---------------------------------------------------------------------------
Paper #239: Exploiting Asymmetric Multi-Core Processors with Flexible
            System Software
---------------------------------------------------------------------------


                  Relevance to ISCA: 3. ISCA paper
  Reviewer confidence and expertise: 5. Expert: I publish  in major forums
                                        on this topic/I implement such
                                        mechanisms in a real system.

                         ===== Paper summary =====

This paper considers a big.LITTLE system running PARSEC benchmarks, and explores how scheduling affects performance. The conclusion is that out-of-the-box thread-based PARSEC does not perform well on heterogeneous multicores because of load imbalance. Instead, task-based parallel implementations of these benchmarks perform well as they implement work stealing.

                           ===== Strengths =====

Evaluation on real big.LITTLE hardware whereas most work in this area is simulation-based.

                          ===== Weaknesses =====

Nothing really novel. Insights are well-known and have been published before.

             ===== Questions to address in the rebuttal =====

None.

                            Novelty: 1. No novelty
                    Writing quality: 3. Good

                   ===== Comments for the authors =====

The fact that the authors do a hardware-based study is refreshing -- most literature on heterogeneous multicore processors is simulation-based. 

Unfortunately, there is nothing novel in this paper compared to prior work in the area. It is well-known that thread-based parallel programs suffer from load imbalance when executed on heterogeneous multicore processors. Task-based parallel programs are better able to balance the work. These insights have been reported previously, see for example [39].

The other findings as listed in the conclusion section don't appear to be novel either. They are fairly straightforward.

===========================================================================
                          ISCA 2016 Review #239B
---------------------------------------------------------------------------
Paper #239: Exploiting Asymmetric Multi-Core Processors with Flexible
            System Software
---------------------------------------------------------------------------


                  Relevance to ISCA: 3. ISCA paper
  Reviewer confidence and expertise: 3. Reasonably knowledgeable: I
                                        regularly read papers on this
                                        topic.

                         ===== Paper summary =====

The paper is an experimental evaluation of performance, energy, and energy-delay product (EDP) of Parsec benchmarks on a real big.little ARM system using different schedulers - statically scheduled threads, OS-driven thread based scheduler that migrates threads between big and little cores based on utilization, and a user-level runtime dynamic scheduler with task-based parallelism exploited by the application.

                           ===== Strengths =====

It is a well done study with a comprehensive analysis of the results.

                          ===== Weaknesses =====

There are no new ideas. While the analysis is good, the results are not surprising. Given the large amount of work on Big.little (nicely covered in the related work section), the bar for acceptance seems higher.

             ===== Questions to address in the rebuttal =====

Are any of these results unexpected?

                            Novelty: 2. Incremental
                    Writing quality: 4. Excellent writing and organization

                   ===== Comments for the authors =====

This is a very nicely conducted study and analysis, but the paper may be better suited to ISPASS. There has been a lot of work on schedulers for Big.little as nicely covered by the related work section. I appreciate the differences pointed out, but at the end, the insights from the analysis here don't appear to be ISCA-level.

===========================================================================
                          ISCA 2016 Review #239C
---------------------------------------------------------------------------
Paper #239: Exploiting Asymmetric Multi-Core Processors with Flexible
            System Software
---------------------------------------------------------------------------


                  Relevance to ISCA: 3. ISCA paper
  Reviewer confidence and expertise: 2. Some familiarity: I have already
                                        read papers(or attended
                                        presentations) on this topic.

                         ===== Paper summary =====

The authors evaluate different scheduling approaches to distribute parallel workloads on asymmetric multicores. They argue that adding small cores to a homogeneous system can add an asymmetry tax which can be detrimental to static scheduling. They evaluate a coarse-grained OS scheduler and fine-grained dynamic task management on real hardware and argue towards using these approaches to best exploit performance gains on heterogeneous systems. They conclude that fine-grained task parallelism is best suited to deal with the asymmetry problem.

                           ===== Strengths =====

The evaluation was realized on real hardware, and looks at performance, power, energy and EDP. The authors also vary the number of big and little cores in their experiments to extrapolate trends.

                          ===== Weaknesses =====

The paper does not propose novel dynamic scheduling techniques, rather it evaluates existing approaches on commodity hardware. The conclusion that fine-grained task scheduling is well suited for asymmetric processors is already well accepted among the community.

             ===== Questions to address in the rebuttal =====

1) The experimental methodology would greatly benefit from breaking down each benchmark execution time into [busy; idle; switching overhead] time to better understand the performance and power results obtained on hardware.
2) Did the authors explore the impact that varying the task size would have on the performance of the task scheduler? Was there an application-specific optimal task size that balances runtime-overhead and load balancing?
3) Why does GTS lead to lower utilization than Task-Based (see Eval, section C). In section B, it is stated that GTS only achieves a limited speedup of 5% with the addition of 4 little cores, but the authors don't provide an explanation.
3) Can changing the application-specific load balancing affect the performance of the benchmark on a homogeneous system? If so, how can we isolate this effect when evaluating different scheduling mechanisms on a heterogeneous system?

                            Novelty: 2. Incremental
                    Writing quality: 4. Excellent writing and organization

                   ===== Comments for the authors =====

The abstract presents the runtime system as a novelty while the evaluation seems to be using on an off-the-shelf OpenMP runtime.
The paper would gain in novelty if it attempted to implement a custom runtime where the FIFO scheduler would be aware of the core type, or the task computational requirements for instance, and compared that custom's scheduler performance to the off-the-shelf runtime scheduler.
The limited novelty in terms of task management ideas or hardware support for exposing useful information to the scheduler makes this work a hard sell to an architecture conference like ISCA.

===========================================================================
                          ISCA 2016 Review #239D
---------------------------------------------------------------------------
Paper #239: Exploiting Asymmetric Multi-Core Processors with Flexible
            System Software
---------------------------------------------------------------------------


                  Relevance to ISCA: 3. ISCA paper
  Reviewer confidence and expertise: 3. Reasonably knowledgeable: I
                                        regularly read papers on this
                                        topic.

                         ===== Paper summary =====

This paper analyzes the performance of parallel workloads on an asymmetric multicore (big.LITTLE) platform.  The benchmarks are taking from PARSEC, with some also rewritten in OmpSs, a dynamic task-based parallel model.  The benchmarks are run on a Samsung Exynos 8-core platform with four A15 and four A7 cores.  Results show that, when using only four cores, using only A15 cores provides the best performance but using only A7 cores provides the best energy efficiency.  Going beyond four cores, adding A7 cores to the A15s can slow the system down for conventional parallel programs, provides a small speedup if the OS has the ability to dynamically move threads around, and provides the best speedups if the application uses a dynamic tasking runtime such as OmpSs.

                           ===== Strengths =====

Thorough analysis of a set of benchmarks running on a real hardware platform, including performance and energy measurements.  Demonstrates the need for dynamic task scheduling for parallel workloads on asymmetric multicores.

                          ===== Weaknesses =====

There's very little justification for why you would want to run these workloads on this platform, or why you'd choose this platform if you wanted to run these workloads.  Furthermore, the key results (that dynamic tasking/load balancing is needed to exploit asymmetric multicores) is not a surprise.  Implausible scenario + unsurprising results -> uninteresting paper.

                            Novelty: 2. Incremental
                    Writing quality: 3. Good

                   ===== Comments for the authors =====

This paper does a reasonable job of analyzing different parallel benchmarks using a few different scheduling strategies on an asymmetric multicore platform.  Unfortunately it doesn't make me care about the results.  Basically there are two issues.

First is that there is really no practical reason I can see to use an asymmetric multicore for these parallel workloads.  The introduction promises to "evaluate for the first time the suitability of currently available mobile asymmetric multi-core platforms for general purpose computing".  However, this would entail comparing asymmetric multi-core platforms with other alternatives, which this paper does not do.  In fact, the results showing that, for a four-core system, you're best off with four homogeneous cores (either the A15s or the A7s, depending on whether you want to optimize for performance or energy efficiency), strongly indicate that if you have the budget for more cores, you would still want a homogeneous system.  Rather, to me, the question this paper answers is "if I want to run parallel workloads but I'm totally stuck with an asymmetric multicore platform, and I lost the receipt so I can't return it for something more suitable, what's the best I can make of this unfortunate situation?".

The second issue is that, even if you find that question compelling, the answer is unsurprising: you really need a runtime that provides good dynamic load balancing, e.g., by maintaining a global task queue and having cores pull tasks off the queue as needed.  The paper does an admirable job of coming at this question from a few different angles, but the results are basically the same regardless.

I think this work could form the foundation of a more interesting paper if there were a comparison with symmetric multicore platforms of similar area/cost/power, to see if there really is any justification for using an asymmetric multicore in a world where there are alternatives.

===========================================================================
                          ISCA 2016 Review #239E
---------------------------------------------------------------------------
Paper #239: Exploiting Asymmetric Multi-Core Processors with Flexible
            System Software
---------------------------------------------------------------------------


                  Relevance to ISCA: 3. ISCA paper
  Reviewer confidence and expertise: 3. Reasonably knowledgeable: I
                                        regularly read papers on this
                                        topic.

                         ===== Paper summary =====

The authors look at the heterogeneous cores (ARMs big.little architecture) on traditional parallel workloads (parcec, facesim) and show that the performance asymmetry of the cores introduces problems with load balancing. This is true for two of the evaluated scheduling algorithms, static scheduling, GTS (course grained scheduler).  The best performance and the only system that successfully harvested additional performance/power benefits using the mixed cores types was "task-based" a load balancing runtime system.  Overall the authors find that with the exception of task-based, both GTS and static scheduling preferred homogenous core types, achieving the best performance results with large cores and the best power results with the small cores.

                           ===== Strengths =====

The results presented are collect from a real system.
The authors present interesting results showing that the Linux scheduler GTS, produces poor results.

                          ===== Weaknesses =====

Although interesting, the results aren't very surprising.

             ===== Questions to address in the rebuttal =====

Does GTS represent the state of the art in dynamic schedulers?  Are there other more interesting comparison points?

                            Novelty: 1. No novelty
                    Writing quality: 3. Good

                   ===== Comments for the authors =====

How were power and energy measured?  Do these results present overall system power or just power from the SOC.

